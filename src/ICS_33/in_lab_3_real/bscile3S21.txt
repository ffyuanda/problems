# Setup
c-->from imp import reload
c-->import exam
c-->reload(exam)
c-->from exam import chain_switch, same_num, min_cuts_same_num, freq_dict
c-->from ile3helper import ints, primes, hide, nth, nth_for_m, is_prime, randoms
c-->from inspect import isgeneratorfunction, isgenerator
c-->def same_number_criteria(s : str) -> bool: return all(same_num(part) for part in s.split('|'))

# Test chain_switch: 6 finite/hidden, 1 infinite
e-->isgenerator(chain_switch(lambda x : True))-->True
e-->list(chain_switch(lambda x: x%2==1, [0,2,3,5,6,7,8], [10,11,12], [21,22,24,25]))-->[0, 2, 3, 10, 11, 21, 5, 12, 22, 24, 25, 6, 7, 8]
e-->list(chain_switch( lambda x: x in 'aeiou', 'antiestablishmentarian','incomprehensibilities', 'supercalifragilisticexpialidocious'))-->['a', 'i', 's', 'u', 'n', 't', 'i', 'n', 'c', 'o', 'p', 'e', 'e', 'm', 'p', 'r', 'e', 'r', 'c', 'a', 's', 't', 'a', 'h', 'e', 'l', 'i', 'b', 'l', 'i', 'n', 's', 'i', 'f', 'r', 'a', 's', 'h', 'm', 'e', 'b', 'i', 'g', 'i', 'n', 't', 'a', 'l', 'i', 'l', 'i', 'r', 'i', 't', 'i', 's', 't', 'i', 'a', 'e', 'c', 'e', 'n', 's', 'x', 'p', 'i', 'a', 'l', 'i', 'd', 'o', 'c', 'i', 'o', 'u', 's']
e-->list(chain_switch(lambda x: x%2==1))-->[]
e-->list(chain_switch(lambda x: x%2==1, hide([0,1,2,3,5,7,8,10,11,12,13,15])))-->[0, 1, 2, 3, 5, 7, 8, 10, 11, 12, 13, 15]
e-->list(chain_switch(lambda x: x%2==1, hide([0,2,3,5,7,8]), hide([11,12,14,15,17])))-->[0, 2, 3, 11, 5, 12, 14, 15, 7, 17, 8]
e-->list(chain_switch(lambda x :x%2==1, hide([350,252,8,493,375,556,75,483,242,16,767,179]), hide([991,970,312,996,494,414,519,291,920,174,118,547]), hide([229,905,73,530,952,521,868,845,143,21,380,122]), hide([586,392,4,428,136,627,684,189,995,455,561,511])))-->[350, 252, 8, 493, 991, 229, 586, 392, 4, 428, 136, 627, 375, 970, 312, 996, 494, 414, 519, 905, 684, 189, 556, 75, 291, 73, 995, 483, 920, 174, 118, 547, 530, 952, 521, 455, 242, 16, 767, 868, 845, 561, 179, 143, 511, 21, 380, 122]
e-->nth_for_m(chain_switch(lambda x :x%100==13, primes(),primes(),primes()),100,20)-->[173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277]

# Test same_num and min_cuts_same_num
e-->same_num('')-->True
e-->same_num('a')-->True
e-->same_num('aab')-->False
e-->same_num('aba')-->False
e-->same_num('abcacb')-->True
e-->same_num('cabcaabcb')-->True
e-->same_num('cabcababcb')-->False

c-->m = min_cuts_same_num('')
e-->same_number_criteria(m),m.replace('|',''),m.count('|')-->(True, '', 0)
c-->m = min_cuts_same_num('a')
e-->same_number_criteria(m),m.replace('|',''),m.count('|')-->(True, 'a', 0)
c-->m = min_cuts_same_num('aaa')
e-->same_number_criteria(m),m.replace('|',''),m.count('|')-->(True, 'aaa', 0)
c-->m = min_cuts_same_num('ab')
e-->same_number_criteria(m),m.replace('|',''),m.count('|')-->(True, 'ab', 0)
c-->m = min_cuts_same_num('aba')
e-->same_number_criteria(m),m.replace('|',''),m.count('|')-->(True, 'aba', 1)
c-->m = min_cuts_same_num('cbbbba')
e-->same_number_criteria(m),m.replace('|',''),m.count('|')-->(True, 'cbbbba', 2)
c-->m = min_cuts_same_num('bbacba')
e-->same_number_criteria(m),m.replace('|',''),m.count('|')-->(True, 'bbacba', 2)
c-->m = min_cuts_same_num('cbcabb')
e-->same_number_criteria(m),m.replace('|',''),m.count('|')-->(True, 'cbcabb', 2)
c-->m = min_cuts_same_num('cabbcabbbc')
e-->same_number_criteria(m),m.replace('|',''),m.count('|')-->(True, 'cabbcabbbc', 2)
c-->m = min_cuts_same_num('accbccbcbc')
e-->same_number_criteria(m),m.replace('|',''),m.count('|')-->(True, 'accbccbcbc', 3)
c-->m = min_cuts_same_num('cbcacbbbcb')
e-->same_number_criteria(m),m.replace('|',''),m.count('|')-->(True, 'cbcacbbbcb', 4)

# Test freq_dict
c-->fd = freq_dict()
==-->fd.get_info(), fd.get_keys()-->("{}", "")
c-->fd['a']=10
==-->fd.get_info(), fd.get_keys()-->("{'a': [1, 1]}", "'a'")
c-->fd['c']=20
==-->fd.get_info(), fd.get_keys()-->("{'a': [1, 1], 'c': [2, 1]}", "'a' -> 'c'")
c-->fd['b']=30
==-->fd.get_info(), fd.get_keys()-->("{'a': [1, 1], 'c': [2, 1], 'b': [3, 1]}", "'a' -> 'c' -> 'b'")
c-->fd['c']; fd['c']; fd['c']; fd['a']; fd['a']; fd['b']
==-->fd.get_info(), fd.get_keys()-->("{'a': [1, 3], 'c': [2, 4], 'b': [3, 2]}", "'c' -> 'a' -> 'b'")
c-->del fd['b']
==-->fd.get_info(), fd.get_keys()-->("{'a': [1, 3], 'c': [2, 4]}", "'c' -> 'a'")
c-->fd['b']=40; fd['b']=41; fd['b']=42; fd['b']=43; fd['b']=44
==-->fd.get_info(), fd.get_keys()-->("{'a': [1, 3], 'c': [2, 4], 'b': [4, 5]}", "'b' -> 'c' -> 'a'")

# Test extra credit for freq_dict
==-->repr(fd)-->"{'b': 44, 'c': 20, 'a': 10}"
==-->fd.get_info(), fd.get_keys()-->("{'a': [1, 3], 'c': [2, 4], 'b': [4, 5]}", "'b' -> 'c' -> 'a'")
